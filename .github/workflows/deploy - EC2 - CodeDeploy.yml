name: Deploy .NET Framework DemoApi to AWS EC2

on:
  push:
    branches:
      - master
      #- main

jobs:
  build:
    runs-on: windows-2019
    steps:

      - name: Configurar AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Checkout código
        uses: actions/checkout@v3

      # - name: Obtener Sonar Token de AWS Secrets Manager
      #   shell: pwsh
      #   run: |
      #     echo "Obteniendo Sonar Token desde AWS Secrets Manager..."
      #     $secretJson = aws secretsmanager get-secret-value --secret-id DemoApi-Sonar-Token --query SecretString --output text
      #     $secretObj = $secretJson | ConvertFrom-Json
      #     echo "SONAR_TOKEN=$($secretObj.SONAR_TOKEN)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Configurar .NET Framework 4.8
        uses: microsoft/setup-msbuild@v1

      - name: Restaurar paquetes NuGet
        run: nuget restore DemoApi.sln

      - name: Instalar SonarScanner para .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Iniciar análisis con SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin /k:"carlospineda2006_DemoApi" 
          /o:"carlospineda2006" 
          /d:sonar.host.url="https://sonarcloud.io" 
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" 
          /d:sonar.cs.opencover.reportsPaths="DemoApi.Tests\coverage.opencover.xml"

      - name: Compilar solución
        run: msbuild DemoApi.sln /p:Configuration=Release /p:Platform="Any CPU"

      - name: Finalizar análisis con SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          if ($LASTEXITCODE -ne 0) {
            echo "❌ Error: SonarCloud detectó problemas en el código. Corrige los errores antes de continuar."
            exit 1
          }
      
      - name: Publicar Web App
        run: |
          msbuild DemoApi.sln `
            /p:Configuration=Release `
            /p:Platform="Any CPU" `
            /p:DeployOnBuild=true `
            /p:WebPublishMethod=FileSystem `
            /p:publishUrl="DemoApi\bin\Release\app.publish" `
            /p:PackageAsSingleFile=false

      - name: Copiar archivos adicionales
        run: |
          Copy-Item -Path appspec.yml -Destination DemoApi\obj\Release\Package\PackageTmp\appspec.yml
          Copy-Item -Path scripts/before_install.ps1 -Destination DemoApi\obj\Release\Package\PackageTmp\scripts\before_install.ps1
          Copy-Item -Path scripts/after_install.ps1 -Destination DemoApi\obj\Release\Package\PackageTmp\scripts\after_install.ps1
          Copy-Item -Path scripts/start_server.ps1 -Destination DemoApi\obj\Release\Package\PackageTmp\scripts\start_server.ps1
  
      - name: Crear archivo ZIP para CodeDeploy
        run: Compress-Archive -Path DemoApi\obj\Release\Package\PackageTmp\* -DestinationPath deploy.zip
        
      - name: Transferir Deploy.zip a S3
        run: |
          aws s3 cp deploy.zip s3://demo-api-deploy/deploy.zip
       
      - name: Desplegar con CodeDeploy
        shell: pwsh
        run: |
          $DEPLOYMENT_ID = aws deploy create-deployment `
            --application-name DemoApiApp `
            --deployment-group-name DemoApiDeploymentGroup `
            --s3-location bucket=demo-api-deploy,key=deploy.zip,bundleType=zip `
            --query "deploymentId" --output text

          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" | Out-File -FilePath $env:GITHUB_ENV -A

      - name: Verificar estado del despliegue
        shell: pwsh
        run: |
          $STATUS = "InProgress"

          while ($STATUS -eq "InProgress" -or $STATUS -eq "Created") {
            $STATUS = aws deploy get-deployment --deployment-id $env:DEPLOYMENT_ID --query "deploymentInfo.status" --output text
            Write-Output "Estado del despliegue: $STATUS"
            Start-Sleep -Seconds 3
          }

          if ($STATUS -ne "Succeeded") {
            Write-Output "El despliegue falló con estado: $STATUS"
            exit 1
          }       
