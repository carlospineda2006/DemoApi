name: Deploy .NET Framework DemoApi to AWS EC2

on:
  push:
    branches:
      - master
      #- main

jobs:
  build:
    runs-on: windows-2019
    steps:

      - name: Configurar AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Checkout código
        uses: actions/checkout@v3

      - name: Obtener secreto de AWS
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            Demo-Api-Sonar-Organization
          parse-json-secrets: true

      - name: Configurar .NET Framework 4.8
        uses: microsoft/setup-msbuild@v1

      - name: Restaurar paquetes NuGet
        run: nuget restore DemoApi.sln

      - name: Instalar SonarScanner para .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Iniciar análisis con SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORG: ${{ env.DEMO_API_SONAR_ORGANIZATION_VALUE }}
        run: |
          dotnet sonarscanner begin /k:"carlospineda2006_DemoApi" /o:"${{ env.SONAR_ORG }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="DemoApi.Tests\coverage.opencover.xml"

      - name: Compilar solución
        run: msbuild DemoApi.sln /p:Configuration=Release /p:Platform="Any CPU"

      - name: Finalizar análisis con SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          if ($LASTEXITCODE -ne 0) {
            echo "Error: SonarCloud detectó problemas en el código. Corrige los errores antes de continuar."
            exit 1
          }
      
      - name: Publicar Web App
        run: |
          msbuild DemoApi.sln `
            /p:Configuration=Release `
            /p:Platform="Any CPU" `
            /p:DeployOnBuild=true `
            /p:WebPublishMethod=FileSystem `
            /p:publishUrl="DemoApi\bin\Release\app.publish" `
            /p:PackageAsSingleFile=false

      - name: Copiar archivos adicionales
        run: |
          Copy-Item -Path appspec.yml -Destination DemoApi\obj\Release\Package\PackageTmp\appspec.yml
          Copy-Item -Path scripts/before_install.ps1 -Destination DemoApi\obj\Release\Package\PackageTmp\scripts\before_install.ps1
          Copy-Item -Path scripts/after_install.ps1 -Destination DemoApi\obj\Release\Package\PackageTmp\scripts\after_install.ps1
          Copy-Item -Path scripts/start_server.ps1 -Destination DemoApi\obj\Release\Package\PackageTmp\scripts\start_server.ps1
  
      - name: Crear archivo ZIP para CodeDeploy
        run: Compress-Archive -Path DemoApi\obj\Release\Package\PackageTmp\* -DestinationPath deploy.zip
        
      - name: Transferir Deploy.zip a S3
        run: |
          aws s3 cp deploy.zip s3://demo-api-deploy/deploy.zip
       
      - name: Desplegar con CodeDeploy
        shell: pwsh
        run: |
          $DEPLOYMENT_ID = aws deploy create-deployment `
            --application-name DemoApiApp `
            --deployment-group-name DemoApiDeploymentGroup `
            --s3-location bucket=demo-api-deploy,key=deploy.zip,bundleType=zip `
            --query "deploymentId" --output text

          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" | Out-File -FilePath $env:GITHUB_ENV -A

      - name: Verificar estado del despliegue
        shell: pwsh
        run: |
          $STATUS = "InProgress"
          $maxAttempts = 400 
          $attempts = 0
          $waitSeconds = 3
          $lastEventCount = 0

          while ($STATUS -eq "InProgress" -or $STATUS -eq "Created") {
            $attempts++
            
            # Obtener información detallada del despliegue
            $deploymentInfo = aws deploy get-deployment --deployment-id $env:DEPLOYMENT_ID --query "deploymentInfo" --output json | ConvertFrom-Json
            $STATUS = $deploymentInfo.status
            
            # Obtener los eventos del despliegue
            $events = aws deploy get-deployment-target --deployment-id $env:DEPLOYMENT_ID --target-id $deploymentInfo.targetInstances[0].targetId --query "deploymentTarget.lifecycleEvents" --output json | ConvertFrom-Json
            
            # Mostrar solo eventos nuevos
            if ($events.Count -gt $lastEventCount) {
              Write-Output "`nIntento $attempts de $maxAttempts - Nuevos eventos detectados:"
              for ($i = $lastEventCount; $i -lt $events.Count; $i++) {
                $event = $events[$i]
                Write-Output "----------------------------------------"
                Write-Output "Lifecycle Event: $($event.lifecycleEventName)"
                Write-Output "Status: $($event.status)"
                Write-Output "Start Time: $($event.startTime)"
                
                if ($event.status -eq "Failed") {
                  Write-Output "Diagnostic: $($event.diagnostics.message)"
                  Write-Output "Script Name: $($event.diagnostics.scriptName)"
                  Write-Output "Log Tail: $($event.diagnostics.logTail)"
                }
              }
              $lastEventCount = $events.Count
            }
            
            if ($attempts -ge $maxAttempts) {
              Write-Output "`nTiempo de espera agotado después de $attempts intentos"
              exit 1
            }
            
            Start-Sleep -Seconds $waitSeconds
          }

          if ($STATUS -ne "Succeeded") {
            Write-Output "`nEl despliegue falló con estado final: $STATUS"
            Write-Output "Descripción: $($deploymentInfo.statusDescription)"
            if ($deploymentInfo.errorInformation) {
              Write-Output "Error Code: $($deploymentInfo.errorInformation.code)"
              Write-Output "Error Message: $($deploymentInfo.errorInformation.message)"
            }
            exit 1
          }

          Write-Output "`nDespliegue completado exitosamente"
          Write-Output "Tiempo total de despliegue: $($deploymentInfo.completeTime - $deploymentInfo.createTime)"
